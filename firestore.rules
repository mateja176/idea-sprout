rules_version = '2';

function isSignedIn() {
  return request.auth != null;
}

function isAuthor() {
  return isSignedIn() && resource.data.author == request.auth.uid;
}

function isIdeaMine() {
  return isSignedIn() && isAuthor();
}

function isStatusType() {
  return request.resource.data.status is string
    && (request.resource.data.status == 'seed' || request.resource.data.status == 'sprout');
}
function isCreatedAtType() {
  return request.resource.data.createdAt is timestamp
    // * prevents creating ideas from the future
    && request.resource.data.createdAt.toMillis() <= request.time.toMillis();
}
function isChecksType() {
  return request.resource.data.checks is map
    && request.resource.data.checks.keys().hasOnly(['niche', 'expectations'])
    && request.resource.data.checks.niche is bool
    && request.resource.data.checks.expectations is bool;
}
function isSharedByType() {
  return request.resource.data.sharedBy is map
}
function isFileType(file) {
  return file is map
    && file.path is string
    && file.width is int
    && file.height is int;
}
function isImagesType() {
  return request.resource.data.images is list
    && ((request.resource.data.images.size() == 1 &&
        isFileType(request.resource.data.images[0])) ||
        (request.resource.data.images.size() == 2 &&
          isFileType(request.resource.data.images[0]) &&
          isFileType(request.resource.data.images[0])));
}
function isIdeaType() {
  return request.resource.data.keys().hasOnly([
      'author',
      'createdAt',
      'checks',
      'status',
      'sharedBy',
      'name',
      'logo',
      'tagline',
      'story',
      'problemSolution',
      'images',
      'rationale',
      'averageRating',
      'ratingCount',
    ])
    && request.resource.data.author is string
    && isCreatedAtType()
    && isChecksType()
    && request.resource.data.status is string && request.resource.data.status == 'seed'
    && isSharedByType()
    && request.resource.data.name is string
    && isFileType(request.resource.data.logo)
    && request.resource.data.tagline is string
    && isFileType(request.resource.data.story)
    && request.resource.data.problemSolution is string
    && isImagesType()
    && request.resource.data.rationale is string
    && request.resource.data.averageRating is number
    && request.resource.data.ratingCount is int;
}
function isPartialIdeaType() {
  return request.resource.data.keys().hasAny([
      'author',
      'createdAt',
      'checks',
      'status',
      'sharedBy',
      'name',
      'logo',
      'tagline',
      'story',
      'problemSolution',
      'images',
      'rationale',
      'averageRating',
      'ratingCount',
    ])
    && (!('author' in request.resource.data)||request.resource.data.author is string)
    && (!('createdAt' in request.resource.data)||isCreatedAtType())
    && (!('checks' in request.resource.data)||isChecksType())
    && (!('status' in request.resource.data)||isStatusType())
    && (!('sharedBy' in request.resource.data)||isSharedByType())
    && (!('name' in request.resource.data)||request.resource.data.name is string)
    && (!('logo' in request.resource.data)||isFileType(request.resource.data.logo))
    && (!('tagline' in request.resource.data)||request.resource.data.tagline is string)
    && (!('story' in request.resource.data)||isFileType(request.resource.data.story))
    && (!('problemSolution' in request.resource.data)||request.resource.data.problemSolution is string)
    && (!('images' in request.resource.data)||isImagesType())
    && (!('rationale' in request.resource.data)||request.resource.data.rationale is string)
    && (!('averageRating' in request.resource.data)||request.resource.data.averageRating is number)
    && (!('ratingCount' in request.resource.data)||request.resource.data.ratingCount is int);
}

function canShare() {
  return isSharedByType()
    && !(request.auth.uid in resource.data.sharedBy)
    && request.resource.data.sharedBy[request.auth.uid] == true
    && (request.resource.data.sharedBy.keys().size() - resource.data.sharedBy.keys().size()) == 1;
}

function willBeAuthor() {
  return request.resource.data.author == request.auth.uid;
}

function canCreateIdea() {
  return request.resource.data.averageRating == 0
    && request.resource.data.ratingCount == 0
    && request.resource.data.sharedBy.size() ==0
    && willBeAuthor();
}

function notUpdatingRating() {
  return request.resource.data.diff(resource.data).unchangedKeys().hasAll(['averageRating', 'ratingCount']);
}

function notUpdatingSharedBy() {
  return request.resource.data.diff(resource.data).unchangedKeys().hasAll(['sharedBy']);
}

function isRatingValid() {
  return request.resource.data.rating is int && request.resource.data.rating >= 1 && request.resource.data.rating <= 5;
}
function isFeedbackValid() {
  return request.resource.data.feedback is string;
}
function isReviewType() {
  return request.resource.data.keys().hasOnly(['rating', 'feedback'])
    && isRatingValid()
    && isFeedbackValid();
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    match /ideas/{ideaId} {
      allow read: if (isAuthor() || resource.data.status == 'sprout');
        // && (!('query' in request) || request.query.limit <= 30) // * my ideas aren't yet being lazy loaded;
      allow create: if isSignedIn() && canCreateIdea() && isIdeaType();
      allow update: if isPartialIdeaType() && willBeAuthor() && (isIdeaMine() && notUpdatingRating() && notUpdatingSharedBy()) ||
        (isSignedIn() && canShare());

      match /reviews/{userId} {
        allow read: if true;
        allow write: if isSignedIn() && userId == request.auth.uid && isReviewType();
      }
    }

    match /counts/ideas {
      allow read: if isSignedIn();
    }

    match /users/{userId} {
      // if the user who is performing the request has an idea which has been reviewed by the requested users
      allow read: if isSignedIn() && (request.auth.uid == userId || request.auth.token.isPro || (exists(/databases/$(database)/documents/orders/$(request.auth.uid)) && (1000 * 60 * 60 * 60 * 24 * 30) - (request.time - get(/databases/$(database)/documents/orders/$(request.auth.uid)).createdAt) > 0));
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    match /orders/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
    }
  }
}
